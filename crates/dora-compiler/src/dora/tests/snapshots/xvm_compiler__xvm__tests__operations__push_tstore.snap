---
source: crates/dora-compiler/src/dora/tests/operations.rs
expression: op
---
module {
  llvm.mlir.global internal @dora.evm_stack_baseptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora.evm_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora.evm_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora.evm_memory_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora.evm_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora.evm_calldata_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora.evm_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_evm_debug_print(i32)
  llvm.mlir.global external @dora_evm_context_is_static() {addr_space = 0 : i32} : !llvm.ptr
  func.func private @dora_evm_write_result(!llvm.ptr, i32, i32, i64, i8)
  func.func private @dora_evm_keccak256_hasher(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_evm_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_evm_get_calldata_size(!llvm.ptr) -> i32
  func.func private @dora_evm_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_evm_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_evm_extend_memory(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_evm_copy_code_to_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_evm_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_evm_append_log(!llvm.ptr, i32, i32)
  func.func private @dora_evm_append_log_with_one_topic(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_evm_append_log_with_two_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_append_log_with_three_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_append_log_with_four_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_evm_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_evm_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_evm_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i32, i32, i32, i32, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_evm_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i32, i32, i32)
  func.func private @dora_evm_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_create(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_evm_create2(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_evm_get_return_data_size(!llvm.ptr) -> i32
  func.func private @dora_evm_copy_return_data_into_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_evm_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_evm_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_evm_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c1024_i256 = arith.constant 1024 : i256
    %0 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %1 = llvm.mlir.addressof @dora.evm_stack_baseptr : !llvm.ptr
    llvm.store %0, %1 : !llvm.ptr, !llvm.ptr
    %2 = llvm.mlir.addressof @dora.evm_stack_ptr : !llvm.ptr
    llvm.store %0, %2 : !llvm.ptr, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %3 = llvm.mlir.addressof @dora.evm_memory_size : !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_evm_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora.evm_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_evm_get_calldata_size(%arg0) : (!llvm.ptr) -> i32
    %7 = llvm.mlir.addressof @dora.evm_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i32, !llvm.ptr
    %8 = llvm.mlir.addressof @dora.evm_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb1:  // pred: ^bb2
    %9 = llvm.mlir.addressof @dora.evm_gas_counter : !llvm.ptr
    %10 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    %11 = llvm.mlir.addressof @dora.evm_gas_counter : !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> i64
    %13 = arith.cmpi sge, %12, %10 : i64
    %14 = arith.subi %12, %10 : i64
    llvm.store %14, %11 : i64, !llvm.ptr
    call @dora_evm_write_result(%arg0, %c0_i32_0, %c0_i32_0, %c0_i64, %c3_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%15: i256):  // no predecessors
    cf.switch %15 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c65535_i256 = arith.constant 65535 : i256
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c8965_i256 = arith.constant 8965 : i256
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %c1_i256 = arith.constant 1 : i256
    %16 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %c8965_i256, %16 : i256, !llvm.ptr
    %17 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %c65535_i256, %17 : i256, !llvm.ptr
    call @dora_evm_transient_storage_write(%arg0, %16, %17) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i32_1 = arith.constant 0 : i32
    %18 = llvm.mlir.addressof @dora.evm_gas_counter : !llvm.ptr
    %19 = llvm.load %18 : !llvm.ptr -> i64
    %c1_i8 = arith.constant 1 : i8
    call @dora_evm_write_result(%arg0, %c0_i32_1, %c0_i32_1, %19, %c1_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
