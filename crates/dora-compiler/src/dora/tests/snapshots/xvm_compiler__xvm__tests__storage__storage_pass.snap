---
source: crates/dora-compiler/src/dora/tests/storage.rs
expression: op
---
module {
  llvm.mlir.global internal @dora_stack_ptr() {addr_space = 0 : i32} : !llvm.ptr
  func.func @dora_u256_map_get(%arg0: memref<?x3xi256>, %arg1: i256) -> (i256, i1) {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %false = arith.constant false
    %true = arith.constant true
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    %alloc_0 = memref.alloc() : memref<1xi256>
    %alloc_1 = memref.alloc() : memref<1xi1>
    memref.store %c0_i256, %alloc_0[%c0] : memref<1xi256>
    memref.store %false, %alloc_1[%c0] : memref<1xi1>
    scf.while : () -> () {
      %3 = memref.load %alloc[%c0] : memref<1xindex>
      %4 = memref.load %arg0[%3, %c2] : memref<?x3xi256>
      %5 = arith.cmpi eq, %4, %c1_i256 : i256
      scf.if %5 {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi eq, %7, %arg1 : i256
        scf.if %8 {
          %9 = memref.load %arg0[%3, %c1] : memref<?x3xi256>
          memref.store %9, %alloc_0[%c0] : memref<1xi256>
          memref.store %true, %alloc_1[%c0] : memref<1xi1>
        } else {
          %9 = arith.addi %3, %c1 : index
          %10 = arith.remsi %9, %dim : index
          memref.store %10, %alloc[%c0] : memref<1xindex>
        }
      } else {
      }
      %6 = scf.if %5 -> (i1) {
        %7 = memref.load %arg0[%3, %c0] : memref<?x3xi256>
        %8 = arith.cmpi ne, %7, %arg1 : i256
        scf.yield %8 : i1
      } else {
        %false_2 = arith.constant false
        scf.yield %false_2 : i1
      }
      scf.condition(%6)
    } do {
      scf.yield
    }
    %1 = memref.load %alloc_0[%c0] : memref<1xi256>
    %2 = memref.load %alloc_1[%c0] : memref<1xi1>
    memref.dealloc %alloc : memref<1xindex>
    memref.dealloc %alloc_0 : memref<1xi256>
    memref.dealloc %alloc_1 : memref<1xi1>
    return %1, %2 : i256, i1
  }
  func.func @dora_u256_map_insert(%arg0: memref<?x3xi256>, %arg1: i256, %arg2: i256) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_i256 = arith.constant 1 : i256
    %c0_i256 = arith.constant 0 : i256
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = call @dora_u256_map_hash(%arg0, %arg1) : (memref<?x3xi256>, i256) -> index
    %alloc = memref.alloc() : memref<1xindex>
    memref.store %0, %alloc[%c0] : memref<1xindex>
    scf.while : () -> () {
      %1 = memref.load %alloc[%c0] : memref<1xindex>
      %2 = memref.load %arg0[%1, %c2] : memref<?x3xi256>
      %3 = arith.cmpi eq, %2, %c1_i256 : i256
      scf.if %3 {
        %4 = memref.load %arg0[%1, %c0] : memref<?x3xi256>
        %5 = arith.cmpi eq, %4, %arg1 : i256
        scf.if %5 {
          memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        } else {
          %6 = arith.addi %1, %c1 : index
          %7 = arith.remsi %6, %dim : index
          memref.store %7, %alloc[%c0] : memref<1xindex>
        }
      } else {
        memref.store %arg1, %arg0[%1, %c0] : memref<?x3xi256>
        memref.store %arg2, %arg0[%1, %c1] : memref<?x3xi256>
        memref.store %c1_i256, %arg0[%1, %c2] : memref<?x3xi256>
      }
      scf.condition(%3)
    } do {
      scf.yield
    }
    memref.dealloc %alloc : memref<1xindex>
    return %arg0 : memref<?x3xi256>
  }
  func.func @dora_u256_map_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %c1_i256 = arith.constant 1 : i256
    %0 = llvm.alloca %c1_i256 x i256 : (i256) -> !llvm.ptr
    llvm.store %arg1, %0 : i256, !llvm.ptr
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %1 = arith.index_cast %dim : index to i64
    %2 = llvm.load %0 : !llvm.ptr -> vector<4xi64>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi64>) : vector<4xi64>
    %4 = llvm.xor %2, %3  : vector<4xi64>
    %5 = "llvm.vector.reduce.xor"(%4) : (vector<4xi64>) -> i64
    %6 = llvm.urem %5, %1  : i64
    %7 = arith.index_cast %6 : i64 to index
    return %7 : index
  }
  func.func @dora_u256_map_simple_hash(%arg0: memref<?x3xi256>, %arg1: i256) -> index {
    %c0 = arith.constant 0 : index
    %dim = memref.dim %arg0, %c0 : memref<?x3xi256>
    %0 = arith.index_cast %dim : index to i256
    %1 = llvm.urem %arg1, %0  : i256
    %2 = arith.index_cast %1 : i256 to index
    return %2 : index
  }
  func.func @dora_u256_map_new(%arg0: index) -> memref<?x3xi256> {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0_i256 = arith.constant 0 : i256
    %alloc = memref.alloc(%arg0) : memref<?x3xi256>
    scf.for %arg1 = %c0 to %arg0 step %c1 {
      memref.store %c0_i256, %alloc[%arg1, %c0] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c1] : memref<?x3xi256>
      memref.store %c0_i256, %alloc[%arg1, %c2] : memref<?x3xi256>
    }
    return %alloc : memref<?x3xi256>
  }
  llvm.mlir.global internal @dora_memory_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_memory_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_calldata_ptr() {addr_space = 0 : i32} : !llvm.ptr
  llvm.mlir.global internal @dora_calldata_size() {addr_space = 0 : i32} : i32
  llvm.mlir.global internal @dora_gas_counter() {addr_space = 0 : i32} : i64
  func.func private @dora_debug_print(i32)
  func.func private @dora_write_result(!llvm.ptr, i32, i32, i64, i8)
  func.func private @dora_keccak256_hasher(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_get_calldata_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_calldata_size(!llvm.ptr) -> i32
  func.func private @dora_get_chainid(!llvm.ptr) -> i64
  func.func private @dora_store_in_callvalue_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_caller_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_gasprice_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_selfbalance_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_blobbasefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_gaslimit(!llvm.ptr) -> i64
  func.func private @dora_extend_memory(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_copy_code_to_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_read_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_write_storage(!llvm.ptr, !llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_append_log(!llvm.ptr, i32, i32)
  func.func private @dora_append_log_with_one_topic(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_append_log_with_two_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_three_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_append_log_with_four_topics(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_origin(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_coinbase_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_block_number(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_codesize_from_address(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_get_address_ptr(!llvm.ptr) -> !llvm.ptr
  func.func private @dora_get_prevrandao(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_timestamp_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_store_in_basefee_ptr(!llvm.ptr, !llvm.ptr)
  func.func private @dora_call(!llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i32, i32, i32, i32, i64, !llvm.ptr, i8) -> i8
  func.func private @dora_store_in_balance(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_copy_ext_code_to_memory(!llvm.ptr, !llvm.ptr, i32, i32, i32)
  func.func private @dora_get_blob_hash_at_index(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_get_block_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_get_code_hash(!llvm.ptr, !llvm.ptr)
  func.func private @dora_create(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_create2(!llvm.ptr, i32, i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> i8
  func.func private @dora_get_return_data_size(!llvm.ptr) -> i32
  func.func private @dora_copy_return_data_into_memory(!llvm.ptr, i32, i32, i32)
  func.func private @dora_selfdestruct(!llvm.ptr, !llvm.ptr) -> i64
  func.func private @dora_transient_storage_read(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func private @dora_transient_storage_write(!llvm.ptr, !llvm.ptr, !llvm.ptr)
  func.func public @main(%arg0: !llvm.ptr, %arg1: i64) -> i8 attributes {llvm.emit_c_interface} {
    %c16 = arith.constant 16 : index
    %0 = call @dora_u256_map_new(%c16) : (index) -> memref<?x3xi256>
    %c1024_i256 = arith.constant 1024 : i256
    %1 = llvm.alloca %c1024_i256 x i256 : (i256) -> !llvm.ptr
    %2 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    llvm.store %1, %2 : !llvm.ptr, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %3 = llvm.mlir.addressof @dora_memory_size : !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_get_calldata_ptr(%arg0) : (!llvm.ptr) -> !llvm.ptr
    %5 = llvm.mlir.addressof @dora_calldata_ptr : !llvm.ptr
    llvm.store %4, %5 : !llvm.ptr, !llvm.ptr
    %6 = call @dora_get_calldata_size(%arg0) : (!llvm.ptr) -> i32
    %7 = llvm.mlir.addressof @dora_calldata_size : !llvm.ptr
    llvm.store %6, %7 : i32, !llvm.ptr
    %8 = llvm.mlir.addressof @dora_gas_counter : !llvm.ptr
    llvm.store %arg1, %8 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb1:  // pred: ^bb2
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %c3_i8 = arith.constant 3 : i8
    call @dora_write_result(%arg0, %c0_i32_0, %c0_i32_0, %c0_i64, %c3_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c3_i8 : i8
  ^bb2(%9: i256):  // no predecessors
    cf.switch %9 : i256, [
      default: ^bb1
    ]
  ^bb3:  // pred: ^bb0
    %c100_i256 = arith.constant 100 : i256
    %10 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    llvm.store %c100_i256, %11 : i256, !llvm.ptr
    %12 = llvm.getelementptr %11[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %12, %10 : !llvm.ptr, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    %c0_i256 = arith.constant 0 : i256
    %13 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256, %14 : i256, !llvm.ptr
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %15, %13 : !llvm.ptr, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %16 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %17[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %19 = llvm.load %18 : !llvm.ptr -> i256
    llvm.store %18, %16 : !llvm.ptr, !llvm.ptr
    %20 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %21[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %23 = llvm.load %22 : !llvm.ptr -> i256
    llvm.store %22, %20 : !llvm.ptr, !llvm.ptr
    %24 = call @dora_u256_map_insert(%0, %19, %23) : (memref<?x3xi256>, i256, i256) -> memref<?x3xi256>
    "dora.sstore"(%19, %23) : (i256, i256) -> ()
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i256_1 = arith.constant 0 : i256
    %25 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_1, %26 : i256, !llvm.ptr
    %27 = llvm.getelementptr %26[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %27, %25 : !llvm.ptr, !llvm.ptr
    cf.br ^bb7
  ^bb7:  // pred: ^bb6
    %28 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.getelementptr %29[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %31 = llvm.load %30 : !llvm.ptr -> i256
    llvm.store %30, %28 : !llvm.ptr, !llvm.ptr
    %32:2 = call @dora_u256_map_get(%24, %31) : (memref<?x3xi256>, i256) -> (i256, i1)
    %33 = scf.if %32#1 -> (i256) {
      scf.yield %32#0 : i256
    } else {
      %62 = "dora.sload"(%31) : (i256) -> i256
      scf.yield %62 : i256
    }
    %34 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    llvm.store %33, %35 : i256, !llvm.ptr
    %36 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %36, %34 : !llvm.ptr, !llvm.ptr
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i256_2 = arith.constant 0 : i256
    %37 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %38 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_2, %38 : i256, !llvm.ptr
    %39 = llvm.getelementptr %38[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %39, %37 : !llvm.ptr, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // pred: ^bb8
    %40 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.getelementptr %41[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %43 = llvm.load %42 : !llvm.ptr -> i256
    llvm.store %42, %40 : !llvm.ptr, !llvm.ptr
    %44 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %45 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.getelementptr %45[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %47 = llvm.load %46 : !llvm.ptr -> i256
    llvm.store %46, %44 : !llvm.ptr, !llvm.ptr
    "dora.mstore"(%43, %47) : (i256, i256) -> ()
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %c32_i256 = arith.constant 32 : i256
    %48 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %49 = llvm.load %48 : !llvm.ptr -> !llvm.ptr
    llvm.store %c32_i256, %49 : i256, !llvm.ptr
    %50 = llvm.getelementptr %49[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %50, %48 : !llvm.ptr, !llvm.ptr
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i256_3 = arith.constant 0 : i256
    %51 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %52 = llvm.load %51 : !llvm.ptr -> !llvm.ptr
    llvm.store %c0_i256_3, %52 : i256, !llvm.ptr
    %53 = llvm.getelementptr %52[1] : (!llvm.ptr) -> !llvm.ptr, i256
    llvm.store %53, %51 : !llvm.ptr, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %54 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %56 = llvm.getelementptr %55[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %57 = llvm.load %56 : !llvm.ptr -> i256
    llvm.store %56, %54 : !llvm.ptr, !llvm.ptr
    %58 = llvm.mlir.addressof @dora_stack_ptr : !llvm.ptr
    %59 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    %60 = llvm.getelementptr %59[-1] : (!llvm.ptr) -> !llvm.ptr, i256
    %61 = llvm.load %60 : !llvm.ptr -> i256
    llvm.store %60, %58 : !llvm.ptr, !llvm.ptr
    "dora.return"(%57, %61) : (i256, i256) -> ()
  ^bb13:  // no predecessors
    cf.br ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i32_4 = arith.constant 0 : i32
    %c1_i8 = arith.constant 1 : i8
    call @dora_write_result(%arg0, %c0_i32_4, %c0_i32_4, %arg1, %c1_i8) : (!llvm.ptr, i32, i32, i64, i8) -> ()
    return %c1_i8 : i8
  }
}
